image: ruby:2.5.1

variables:
  JEKYLL_ENV: production
  LC_ALL: C.UTF-8
  NOKOGIRI_USE_SYSTEM_LIBRARIES: "true"

before_script:
  - bundle install --path vendor

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - vendor/ruby

pages:
  stage: test
  variables:
    JEKYLL_ENV: development
  script:
  - bundle exec jekyll build -d public --config _config.yml,_config.dev.yml
  artifacts:
    paths:
    - public
  only:
  - master

code_quality:
  image: docker:stable
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  cache: {}
  services:
    - docker:stable-dind
  before_script: []
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]

dependency_scanning:
  image: docker:stable
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  cache: {}
  services:
    - docker:stable-dind
  before_script: []
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]

stages:
  - test
  - build
  - deploy

build:
  stage: build
  when: manual
  allow_failure: false
  script:
  - bundle exec jekyll build -d deploy
  artifacts:
    paths:
    - deploy
  only:
  - master

deploy:
  stage: deploy
  image: alpine:latest
  cache: {}
  when: on_success
  before_script:
  - 'which ssh-agent || ( apk update && apk add openssh-client bash rsync )'
  - eval $(ssh-agent -s)
  - echo "$PRODUCTION_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -H $PRODUCTION_SERVER >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  script:
  - rsync -hrvz --delete-before --exclude=.well-known -e ssh deploy/ "${SSH_USER_HOST_LOCATION}"
  only:
  - master
